<?xml version="1.0" encoding="UTF-8"?>
<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 900 700">
  <defs>
    <style>
      .actor { fill: #e3f2fd; stroke: #1976d2; stroke-width: 2; }
      .service { fill: #f3e5f5; stroke: #7b1fa2; stroke-width: 2; }
      .message { fill: #e8f5e8; stroke: #388e3c; stroke-width: 2; }
      .text { font-family: Arial, sans-serif; font-size: 11px; text-anchor: middle; }
      .title-text { font-family: Arial, sans-serif; font-size: 12px; font-weight: bold; text-anchor: middle; }
      .arrow { stroke: #666; stroke-width: 2; fill: none; marker-end: url(#arrowhead); }
      .dashed { stroke-dasharray: 5,5; }
      .lifeline { stroke: #ccc; stroke-width: 1; stroke-dasharray: 2,2; }
    </style>
    <marker id="arrowhead" markerWidth="10" markerHeight="7" refX="9" refY="3.5" orient="auto">
      <polygon points="0 0, 10 3.5, 0 7" fill="#666" />
    </marker>
  </defs>

  <!-- Title -->
  <text x="450" y="30" class="title-text" style="font-size: 16px;">Wall System - Event Sequence Diagram</text>

  <!-- Actors/Services Headers -->
  <rect x="50" y="50" width="80" height="40" class="actor" />
  <text x="90" y="75" class="title-text">Client</text>

  <rect x="180" y="50" width="80" height="40" class="service" />
  <text x="220" y="65" class="title-text">API</text>
  <text x="220" y="80" class="title-text">Gateway</text>

  <rect x="310" y="50" width="80" height="40" class="message" />
  <text x="350" y="75" class="title-text">Kafka</text>

  <rect x="440" y="50" width="80" height="40" class="service" />
  <text x="480" y="75" class="title-text">Simulator</text>

  <rect x="570" y="50" width="80" height="40" class="service" />
  <text x="610" y="65" class="title-text">Material-</text>
  <text x="610" y="80" class="title-text">izer</text>

  <rect x="700" y="50" width="80" height="40" class="service" />
  <text x="740" y="75" class="title-text">Database</text>

  <!-- Lifelines -->
  <line x1="90" y1="90" x2="90" y2="650" class="lifeline" />
  <line x1="220" y1="90" x2="220" y2="650" class="lifeline" />
  <line x1="350" y1="90" x2="350" y2="650" class="lifeline" />
  <line x1="480" y1="90" x2="480" y2="650" class="lifeline" />
  <line x1="610" y1="90" x2="610" y2="650" class="lifeline" />
  <line x1="740" y1="90" x2="740" y2="650" class="lifeline" />

  <!-- Step 1: Client creates profile -->
  <line x1="90" y1="120" x2="220" y2="120" class="arrow" />
  <text x="155" y="115" class="text">1. POST /api/profiles/</text>
  <text x="155" y="135" class="text">{profile_id, height}</text>

  <!-- Step 2: API Gateway saves to database -->
  <line x1="220" y1="160" x2="740" y2="160" class="arrow" />
  <text x="480" y="155" class="text">2. INSERT INTO wall_profiles</text>

  <!-- Step 3: Database confirms -->
  <line x1="740" y1="180" x2="220" y2="180" class="arrow dashed" />
  <text x="480" y="175" class="text">Profile saved</text>

  <!-- Step 4: API Gateway publishes event -->
  <line x1="220" y1="220" x2="350" y2="220" class="arrow" />
  <text x="285" y="215" class="text">3. Publish</text>
  <text x="285" y="235" class="text">ProfileCreated</text>

  <!-- Step 5: API Gateway responds to client -->
  <line x1="220" y1="260" x2="90" y2="260" class="arrow dashed" />
  <text x="155" y="255" class="text">4. 201 Created</text>
  <text x="155" y="275" class="text">{profile_id, ...}</text>

  <!-- Step 6: Simulator consumes event -->
  <line x1="350" y1="300" x2="480" y2="300" class="arrow" />
  <text x="415" y="295" class="text">5. Consume</text>
  <text x="415" y="315" class="text">ProfileCreated</text>

  <!-- Step 7: Simulator processes -->
  <rect x="460" y="340" width="40" height="60" fill="#fff3e0" stroke="#f57c00" />
  <text x="480" y="365" class="text">6. Run</text>
  <text x="480" y="380" class="text">Daily</text>
  <text x="480" y="395" class="text">Simulation</text>

  <!-- Step 8: Simulator publishes progress -->
  <line x1="480" y1="420" x2="350" y2="420" class="arrow" />
  <text x="415" y="415" class="text">7. Publish</text>
  <text x="415" y="435" class="text">SimulationProgress</text>

  <!-- Step 9: Materializer consumes progress -->
  <line x1="350" y1="460" x2="610" y2="460" class="arrow" />
  <text x="480" y="455" class="text">8. Consume</text>
  <text x="480" y="475" class="text">SimulationProgress</text>

  <!-- Step 10: Materializer updates database -->
  <line x1="610" y1="500" x2="740" y2="500" class="arrow" />
  <text x="675" y="495" class="text">9. UPDATE</text>
  <text x="675" y="515" class="text">total_cost</text>

  <!-- Step 11: Client checks progress -->
  <line x1="90" y1="540" x2="220" y2="540" class="arrow" />
  <text x="155" y="535" class="text">10. GET /api/profiles/{id}/</text>

  <!-- Step 12: API Gateway reads from database -->
  <line x1="220" y1="560" x2="740" y2="560" class="arrow" />
  <text x="480" y="555" class="text">SELECT * FROM wall_profiles</text>

  <!-- Step 13: Database returns updated profile -->
  <line x1="740" y1="580" x2="220" y2="580" class="arrow dashed" />
  <text x="480" y="575" class="text">Profile with total_cost</text>

  <!-- Step 14: API Gateway responds with cost -->
  <line x1="220" y1="620" x2="90" y2="620" class="arrow dashed" />
  <text x="155" y="615" class="text">11. 200 OK</text>
  <text x="155" y="635" class="text">{profile_id, total_cost}</text>

  <!-- Notes -->
  <g transform="translate(50, 670)">
    <text x="0" y="0" class="title-text">Key Points:</text>
    <text x="0" y="15" class="text">• Async processing: Client gets immediate response, simulation runs in background</text>
    <text x="0" y="30" class="text">• Event-driven: Services communicate via Kafka for loose coupling</text>
    <text x="0" y="45" class="text">• Eventually consistent: Cost calculation completes within seconds</text>
  </g>

  <!-- Timing annotations -->
  <g transform="translate(820, 120)">
    <text x="0" y="0" class="text">~100ms</text>
  </g>
  <g transform="translate(820, 260)">
    <text x="0" y="0" class="text">~200ms</text>
  </g>
  <g transform="translate(820, 380)">
    <text x="0" y="0" class="text">~2-5sec</text>
  </g>
  <g transform="translate(820, 540)">
    <text x="0" y="0" class="text">~50ms</text>
  </g>
</svg>
