services:
  # Kafka Infrastructure
  zookeeper:
    image: confluentinc/cp-zookeeper:7.4.0
    hostname: zookeeper
    container_name: wall-zookeeper
    ports:
      - "2181:2181"
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    healthcheck:
      test: ["CMD", "bash", "-c", "echo 'ruok' | nc localhost 2181"]
      interval: 10s
      timeout: 5s
      retries: 5

  kafka:
    image: confluentinc/cp-kafka:7.4.0
    hostname: kafka
    container_name: wall-kafka
    depends_on:
      zookeeper:
        condition: service_healthy
    ports:
      - "9092:9092"
      - "9101:9101"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: 'zookeeper:2181'
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:29092,PLAINTEXT_HOST://localhost:9092
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 0
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: 'true'
    healthcheck:
      test: ["CMD", "bash", "-c", "kafka-broker-api-versions --bootstrap-server localhost:9092"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Database
  postgres:
    image: postgres:15-alpine
    container_name: wall-postgres
    environment:
      POSTGRES_DB: wall
      POSTGRES_USER: wall
      POSTGRES_PASSWORD: wall
    command: >
      postgres
      -c max_connections=400
      -c shared_buffers=256MB
      -c effective_cache_size=1GB
      -c maintenance_work_mem=128MB
      -c checkpoint_completion_target=0.9
      -c wal_buffers=32MB
      -c default_statistics_target=100
      -c idle_in_transaction_session_timeout=300000
      -c tcp_keepalives_idle=600
      -c tcp_keepalives_interval=30
      -c tcp_keepalives_count=3
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U wall"]
      interval: 10s
      timeout: 5s
      retries: 5

  # API Gateway (Django)
  api:
    build:
      context: .
      dockerfile: infrastructure/docker/Dockerfile.api
    container_name: wall-api
    depends_on:
      postgres:
        condition: service_healthy
      kafka:
        condition: service_healthy
    ports:
      - "8000:8000"
    environment:
      - USE_SQLITE=False
      - DB_NAME=wall
      - DB_USER=wall
      - DB_PASSWORD=wall
      - DB_HOST=postgres
      - DB_PORT=5432
      - DB_MAX_CONNS=25
      - KAFKA_BOOTSTRAP_SERVERS=kafka:29092
      - CONTAINER_NAME=api
    volumes:
      - .:/app
    command: >
      sh -c "python manage.py migrate &&
             python manage.py runserver 0.0.0.0:8000"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health/"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Simulation Service (FastAPI)
  simulator:
    build:
      context: .
      dockerfile: infrastructure/docker/Dockerfile.simulator
    container_name: wall-simulator
    depends_on:
      kafka:
        condition: service_healthy
    ports:
      - "9000:9000"
    environment:
      - KAFKA_BOOTSTRAP_SERVERS=kafka:29092
    volumes:
      - .:/app
    command: >
      sh -c "python -m services.simulator.main"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Materializer (Django Command)
  materializer:
    build:
      context: .
      dockerfile: infrastructure/docker/Dockerfile.api
    container_name: wall-materializer
    depends_on:
      api:
        condition: service_healthy
      kafka:
        condition: service_healthy
    environment:
      - USE_SQLITE=False
      - DB_NAME=wall
      - DB_USER=wall
      - DB_PASSWORD=wall
      - DB_HOST=postgres
      - DB_PORT=5432
      - DB_MAX_CONNS=20
      - KAFKA_BOOTSTRAP_SERVERS=kafka:29092
      - CONTAINER_NAME=materializer
    volumes:
      - .:/app
    command: >
      sh -c "python manage.py run_materializer --kafka-servers kafka:29092"
    restart: unless-stopped

  # Grafana for observability
  grafana:
    image: grafana/grafana:10.0.0
    container_name: wall-grafana
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin
    volumes:
      - grafana_data:/var/lib/grafana
      - ./docker/grafana/provisioning:/etc/grafana/provisioning
    healthcheck:
      test: ["CMD-SHELL", "curl -f localhost:3000/api/health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Prometheus for metrics
  prometheus:
    image: prom/prometheus:v2.46.0
    container_name: wall-prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./infrastructure/docker/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--web.enable-lifecycle'
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:9090/"]
      interval: 30s
      timeout: 10s
      retries: 3

volumes:
  postgres_data:
  grafana_data:
  prometheus_data:

networks:
  default:
    name: wall-network
